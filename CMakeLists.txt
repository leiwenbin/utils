CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(utils)

option(C++11_ENABLE "C++11_ENABLE" ON)

SET(CMAKE_C_COMPILER "/usr/bin/gcc")
SET(CMAKE_CXX_COMPILER "/usr/bin/c++")

IF(C++11_ENABLE)
    IF(APPLE)
    ELSEIF(UNIX)
        SET(CMAKE_C_COMPILER "/opt/rh/devtoolset-2/root/usr/bin/gcc")
        SET(CMAKE_CXX_COMPILER "/opt/rh/devtoolset-2/root/usr/bin/c++")
    ENDIF()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 ")
ELSE()
    IF(APPLE)
    ELSEIF(UNIX)
        SET(CMAKE_C_COMPILER "/usr/bin/gcc")
        SET(CMAKE_CXX_COMPILER "/usr/bin/c++")
    ENDIF()
ENDIF()

MESSAGE("CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -g -fPIC -Wall -D_REENTRANT -DUSE_APACHE -DNO_STRING_CIPHER")
SET(TARGET "utils")
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../lib/release_linux/libUtils)
#SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)

AUX_SOURCE_DIRECTORY(src SOURCE_DIRS_SRC)
#AUX_SOURCE_DIRECTORY(src/test SOURCE_DIRS_SRC_TEST)

IF (APPLE)
    INCLUDE_DIRECTORIES(/usr/local/brew/Cellar/openssl/1.0.2g/include)
ENDIF (APPLE)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../include)


ADD_LIBRARY(${TARGET} STATIC ${SOURCE_DIRS_SRC})
#ADD_EXECUTABLE(${TARGET} ${SOURCE_DIRS_SRC} ${SOURCE_DIRS_SRC_TEST})

TARGET_LINK_LIBRARIES(${TARGET} -lcrypto -luuid -ldl)
